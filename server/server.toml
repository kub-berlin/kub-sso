# issuer for OIDC ID Tokens
issuer = "https://example.com"
default_clients = []
signup_email = "signups@example.com"
max_days_since_last_login = 30

# you can use https://mkjwk.org/ to generate a key pair
private_key_pem = "-----BEGIN PRIVATE KEY-----\nMIIBUwIBADANBgkqhkiG9w0BAQEFAASCAT0wggE5AgEAAkEAravYp8W5eaN8truz\nU0miDdbliWf8KGoeRWrpqXsjATTzGMn286xSsRrpYHvHw5H4HYHCcXXzzluqTo0V\niu3I2QIDAQABAkAufbpZ70xfi6xvHoA645NGMSjxR6zxBLdlzeEPRa9xOtCb3tT+\niujD+fBa2fK49VmfgQHhIsa7kZVBpeF7D4aBAiEA/h3KAM7XSA43/8Bo28oH/GSm\nmkrEgOXZCb2pMC6o1w0CIQCu9WecEA4EsvTTm/RfYiHvRwBCJtvTWwXTTHAMkdYF\n/QIgaphOWyZo0fX88ZBhrAjEbtA9vq0sXrGL6HUhmm+ILaUCIC5wHp8St9XRdiBQ\nja1fi6hKDSyByekwiLxL1pXPg6I1AiB9Xc4n0V+BA/Qrx012PfKQRNAOfdWVMhtG\nzWqDmHeKSA==\n-----END PRIVATE KEY-----\n"
public_key_pem = "-----BEGIN PUBLIC KEY-----\nMFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAK2r2KfFuXmjfLa7s1NJog3W5Yln/Chq\nHkVq6al7IwE08xjJ9vOsUrEa6WB7x8OR+B2BwnF1885bqk6NFYrtyNkCAwEAAQ==\n-----END PUBLIC KEY-----\n"
public_key_n = "ravYp8W5eaN8truzU0miDdbliWf8KGoeRWrpqXsjATTzGMn286xSsRrpYHvHw5H4HYHCcXXzzluqTo0Viu3I2Q"

[email]
host = "mail.example.com"
username = "no-reply@mail.example.com"
password = "CHANGEME"

[smtp]
"gmail.com" = "smtp.gmail.com"

[clients.example]
# can be generated with `python3 -m kub_sso --password`
secret = "$argon2id$v=19$m=102400,t=2,p=8$K/DVLWP9hIwxl3Dkz8/iIw$5zMAqAUJyFx/0JPqSRE1+g"  # "CHANGEME"
# see https://www.rfc-editor.org/rfc/rfc6749#section-3.1.2
redirect_uri = "https://example.com"
code_challenge_required = true

[users.test]
full_name = "Test User"
email = "test@example.com"
unix_id = 1008
unix_groups = ["test"]
oidc_groups = ["foo"]
clients = ["example"]
created_at = "1970-01-01"

# NOTE: this is the actual passphrase used to encrypt the user home.
# It is encrypted with the user password and then stored on the devices.
# We need it unencrypted here so we can update the devices when the user password changes.
ecryptfs_passphrase = "2af2cd69172859a84ed65db06e9b2477"

# choose one of these authentication backends:
# - internal: use the `auth_password` field (can be generated with `python3 -m kub_sso --password`)
# - unix: use a local account on the server
# - smtp: use SMTP authentication (requires the `email` field on the user and a hostname mapping in the `smtp` section)
auth = "internal"
auth_password = "$argon2id$v=19$m=102400,t=2,p=8$J5VBlZuK+KX4DnY9X44J/A$hZ3Ubnohz4i5LYiuuZm48g"  # "password"

# the `client_claims` field can be used to define additional claims for specific clients
client_claims.example.foo = "bar"
